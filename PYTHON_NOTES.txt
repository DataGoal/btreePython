PYTHON STRINGS

Strings in python are surrounded by either single quotation marks, or double quotation marks
'hello' is the same as "hello"
You can display a string literal with the print() function
print("Hello")
print('Hello')
-------------------------------------------------------------------------------
You can assign a multiline string to a variable by using three quotes
a = """Lorem ipsum dolor sit amet,
consectetur adipiscing elit,
sed do eiusmod tempor incididunt
ut labore et dolore magna aliqua."""
print(a)
-------------------------------------------------------------------------------
Python does not have a character data type, a single character is simply a string with a length of 1
Square brackets can be used to access elements of the string
a = "Hello, World!"
print(a[1])
-------------------------------------------------------------------------------
we can loop through the characters in a string, with a for loop
for x in "banana":
  print(x)
-------------------------------------------------------------------------------
To check if a certain phrase or character is present in a string, we can use the keyword in
txt = "The best things in life are free!"
print("free" in txt)

with if,
txt = "The best things in life are free!"
if "free" in txt:
  print("Yes, 'free' is present.")
-------------------------------------------------------------------------------
To check if a certain phrase or character is NOT present in a string, we can use the keyword not in
txt = "The best things in life are free!"
print("expensive" not in txt)

with if,
txt = "The best things in life are free!"
if "expensive" not in txt:
  print("Yes, 'expensive' is NOT present.")
-------------------------------------------------------------------------------
SLICING STRINGS:

You can return a range of characters by using the slice syntax
Specify the start index and the end index, separated by a colon, to return a part of the string
b = "Hello, World!"
print(b[2:5])
-------------------------------------------------------------------------------
By leaving out the start index, the range will start at the first character
b = "Hello, World!"
print(b[:5])
-------------------------------------------------------------------------------
By leaving out the end index, the range will go to the end
b = "Hello, World!"
print(b[2:])
-------------------------------------------------------------------------------
Use negative indexes to start the slice from the end of the string
b = "Hello, World!"
print(b[-5:-2])
-------------------------------------------------------------------------------
PYTHON - MODIFY STRINGS

Python has a set of built-in methods that you can use on strings.

The upper() method returns the string in upper case
a = "Hello, World!"
print(a.upper())
-------------------------------------------------------------------------------
The lower() method returns the string in lower case
a = "Hello, World!"
print(a.lower())
-------------------------------------------------------------------------------
Whitespace is the space before and/or after the actual text, and very often you want to remove this space.
a = " Hello, World! "
print(a.strip()) # returns "Hello, World!"
-------------------------------------------------------------------------------
The replace() method replaces a string with another string
a = "Hello, World!"
print(a.replace("H", "J"))
-------------------------------------------------------------------------------
The split() method splits the string into substrings if it finds instances of the separator
a = "Hello, World!"
print(a.split(",")) # returns ['Hello', ' World!']
-------------------------------------------------------------------------------
PYTHON - FORMAT - STRINGS

In python, we cannot combine strings and numbers like this
age = 36
txt = "My name is John, I am " + age
print(txt)
-------------------------------------------------------------------------------
But we can combine strings and numbers by using the format() method!
The format() method takes the passed arguments, formats them, and places them in the string where the placeholders {} are:
Use the format() method to insert numbers into strings:
age = 36
txt = "My name is John, and I am {}"
print(txt.format(age))

The format() method takes unlimited number of arguments, and are placed into the respective placeholders:
quantity = 3
itemno = 567
price = 49.95
myorder = "I want {} pieces of item {} for {} dollars."
print(myorder.format(quantity, itemno, price))

You can use index numbers {0} to be sure the arguments are placed in the correct placeholders:
quantity = 3
itemno = 567
price = 49.95
myorder = "I want to pay {2} dollars for {0} pieces of item {1}."
print(myorder.format(quantity, itemno, price))
-------------------------------------------------------------------------------
PYTHON - ESCAPE CHARACTERS

To insert characters that are illegal in a string, use an escape character.
An escape character is a backslash \ followed by the character you want to insert.
An example of an illegal character is a double quote inside a string that is surrounded by double quotes:

txt = "We are the so-called "Vikings" from the north."

this will leads to error

txt = "We are the so-called \"Vikings\" from the north."
-------------------------------------------------------------------------------

ACCESS DICTIONARY ITEMS

Get the value of the "model" key:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
x = thisdict["model"]
x = thisdict.get("model")
-------------------------------------------------------------------------------
Get a list of the keys:

x = thisdict.keys()
-------------------------------------------------------------------------------

Add a new item to the original dictionary, and see that the keys list gets updated as well:

car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}
x = car.keys()
print(x) #before the change
car["color"] = "white"
print(x) #after the change
-------------------------------------------------------------------------------
Get a list of the values:

car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}
x = car.values()
print(x) #before the change
car["year"] = 2020
print(x) #after the change
-------------------------------------------------------------------------------
Add a new item to the original dictionary, and see that the values list gets updated as well:

car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}

x = car.values()
print(x) #before the change
car["color"] = "red"
print(x) #after the change
-------------------------------------------------------------------------------
The items() method will return each item in a dictionary, as tuples in a list.

x = thisdict.items()
-------------------------------------------------------------------------------
Make a change in the original dictionary, and see that the items list gets updated as well:

car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}

x = car.items()
print(x) #before the change
car["year"] = 2020
print(x) #after the change
-------------------------------------------------------------------------------
Add a new item to the original dictionary, and see that the items list gets updated as well:

car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}

x = car.items()
print(x) #before the change
car["color"] = "red"
print(x) #after the change
-------------------------------------------------------------------------------
Check if "model" is present in the dictionary:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
if "model" in thisdict:
  print("Yes, 'model' is one of the keys in the thisdict dictionary")


Change the "year" to 2018:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict["year"] = 2018

-------------------------------------------------------------------------------
Update the "year" of the car by using the update() method:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.update({"year": 2020})

Adding an item to the dictionary is done by using a new index key and assigning a value to it:
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict["color"] = "red"
print(thisdict)

-------------------------------------------------------------------------------
The update() method will update the dictionary with the items from a given argument. If the item does not exist, the item will be added.

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.update({"color": "red"})
-------------------------------------------------------------------------------

The pop() method removes the item with the specified key name:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.pop("model")
print(thisdict)
-------------------------------------------------------------------------------
The popitem() method removes the last inserted item (in versions before 3.7, a random item is removed instead):

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.popitem()
print(thisdict)
-------------------------------------------------------------------------------
The del keyword removes the item with the specified key name:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
del thisdict["model"]
print(thisdict)
-------------------------------------------------------------------------------
The del keyword can also delete the dictionary completely:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
del thisdict
print(thisdict) #this will cause an error because "thisdict" no longer exists.
-------------------------------------------------------------------------------
The clear() method empties the dictionary:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.clear()
print(thisdict)
-------------------------------------------------------------------------------
Python - Loop Dictionaries
When looping through a dictionary, the return value are the keys of the dictionary, but there are methods to return the values as well.

Print all key names in the dictionary, one by one:
for x in thisdict:
  print(x)
-------------------------------------------------------------------------------
Print all values in the dictionary, one by one:

for x in thisdict:
  print(thisdict[x])
-------------------------------------------------------------------------------
You can also use the values() method to return values of a dictionary:

for x in thisdict.values():
  print(x)
-------------------------------------------------------------------------------
You can use the keys() method to return the keys of a dictionary:

for x in thisdict.keys():
  print(x)
-------------------------------------------------------------------------------
Loop through both keys and values, by using the items() method:

for x, y in thisdict.items():
  print(x, y)
-------------------------------------------------------------------------------
Python - Copy Dictionaries
You cannot copy a dictionary simply by typing dict2 = dict1, because: dict2 will only be a reference to dict1, and changes made in dict1 will automatically also be made in dict2.

There are ways to make a copy, one way is to use the built-in Dictionary method copy().
Make a copy of a dictionary with the copy() method:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
mydict = thisdict.copy()
print(mydict)
-------------------------------------------------------------------------------
Another way to make a copy is to use the built-in function dict().

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
mydict = dict(thisdict)
print(mydict)
-------------------------------------------------------------------------------
Nested Dictionaries
A dictionary can contain dictionaries, this is called nested dictionaries.

Create a dictionary that contain three dictionaries:
myfamily = {
  "child1" : {
    "name" : "Emil",
    "year" : 2004
  },
  "child2" : {
    "name" : "Tobias",
    "year" : 2007
  },
  "child3" : {
    "name" : "Linus",
    "year" : 2011
  }
}
-------------------------------------------------------------------------------
Create three dictionaries, then create one dictionary that will contain the other three dictionaries:
child1 = {
  "name" : "Emil",
  "year" : 2004
}
child2 = {
  "name" : "Tobias",
  "year" : 2007
}
child3 = {
  "name" : "Linus",
  "year" : 2011
}

myfamily = {
  "child1" : child1,
  "child2" : child2,
  "child3" : child3
}

print(myfamily)
{
   "child1":{
      "name":"Emil",
      "year":2004
   },
   "child2":{
      "name":"Tobias",
      "year":2007
   },
   "child3":{
      "name":"Linus",
      "year":2011
   }
}
-------------------------------------------------------------------------------
Python If ... Else

An "if statement" is written by using the if keyword.

a = 33
b = 200
if b > a:
  print("b is greater than a")
-------------------------------------------------------------------------------
The elif keyword is pythons way of saying "if the previous conditions were not true, then try this condition".

a = 33
b = 33
if b > a:
  print("b is greater than a")
elif a == b:
  print("a and b are equal")
-------------------------------------------------------------------------------
The else keyword catches anything which isn't caught by the preceding conditions.

a = 200
b = 33
if b > a:
  print("b is greater than a")
elif a == b:
  print("a and b are equal")
else:
  print("a is greater than b")

a = 200
b = 33
if b > a:
  print("b is greater than a")
else:
  print("b is not greater than a")
-------------------------------------------------------------------------------
If you have only one statement to execute, you can put it on the same line as the if statement.

if a > b: print("a is greater than b")
-------------------------------------------------------------------------------
Short Hand If ... Else

a = 2
b = 330
print("A") if a > b else print("B")
-------------------------------------------------------------------------------
We can also have multiple else statements on the same line, This technique is known as Ternary Operators, or Conditional Expressions.
One line if else statement, with 3 conditions:

print("A") if a > b else print("=") if a == b else print("B")
-------------------------------------------------------------------------------
The and keyword is a logical operator, and is used to combine conditional statements:

a = 200
b = 33
c = 500
if a > b and c > a:
  print("Both conditions are True")
-------------------------------------------------------------------------------
The or keyword is a logical operator, and is used to combine conditional statements:

a = 200
b = 33
c = 500
if a > b or a > c:
  print("At least one of the conditions is True")
-------------------------------------------------------------------------------
You can have if statements inside if statements, this is called nested if statements.

x = 41

if x > 10:
  print("Above ten,")
  if x > 20:
    print("and also above 20!")
  else:
    print("but not above 20.")
-------------------------------------------------------------------------------
if statements cannot be empty, but if you for some reason have an if statement with no content, put in the pass statement to avoid getting an error.

a = 33
b = 200

if b > a:
  pass
-------------------------------------------------------------------------------
The while Loop
With the while loop we can execute a set of statements as long as a condition is true.
Print i as long as i is less than 6:

i = 1
while i < 6:
  print(i)
  i += 1
-------------------------------------------------------------------------------
With the break statement we can stop the loop even if the while condition is true:

Exit the loop when i is 3:

i = 1
while i < 6:
  print(i)
  if i == 3:
    break
  i += 1
-------------------------------------------------------------------------------
With the continue statement we can stop the current iteration, and continue with the next:

Continue to the next iteration if i is 3:

i = 0
while i < 6:
  i += 1
  if i == 3:
    continue
  print(i)
-------------------------------------------------------------------------------
With the else statement we can run a block of code once when the condition no longer is true:

Print a message once the condition is false:

i = 1
while i < 6:
  print(i)
  i += 1
else:
  print("i is no longer less than 6")
-------------------------------------------------------------------------------
Python For Loops

With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc.

Print each fruit in a fruit list:

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)
-------------------------------------------------------------------------------
Even strings are iterable objects, they contain a sequence of characters:
Loop through the letters in the word "banana":

for x in "banana":
  print(x)
-------------------------------------------------------------------------------
With the break statement we can stop the loop before it has looped through all the items:
Exit the loop when x is "banana":

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)
  if x == "banana":
    break
-------------------------------------------------------------------------------
Exit the loop when x is "banana", but this time the break comes before the print:

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  if x == "banana":
    break
  print(x)
-------------------------------------------------------------------------------
With the continue statement we can stop the current iteration of the loop, and continue with the next:
Do not print banana:

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  if x == "banana":
    continue
  print(x)
-------------------------------------------------------------------------------
The range() Function
To loop through a set of code a specified number of times, we can use the range() function,
The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and ends at a specified number.

Using the range() function:

for x in range(6):
  print(x)

Note that range(6) is not the values of 0 to 6, but the values 0 to 5.
The range() function defaults to 0 as a starting value, however it is possible to specify the starting value by adding a parameter: range(2, 6), which means values from 2 to 6 (but not including 6):

for x in range(2, 6):
  print(x)
-------------------------------------------------------------------------------
The range() function defaults to increment the sequence by 1, however it is possible to specify the increment value by adding a third parameter: range(2, 30, 3):

for x in range(2, 30, 3):
  print(x)
-------------------------------------------------------------------------------
Else in For Loop
The else keyword in a for loop specifies a block of code to be executed when the loop is finished:

Print all numbers from 0 to 5, and print a message when the loop has ended:

for x in range(6):
  print(x)
else:
  print("Finally finished!")
-------------------------------------------------------------------------------
Nested Loops
A nested loop is a loop inside a loop.
The "inner loop" will be executed one time for each iteration of the "outer loop":

Print each adjective for every fruit:

adj = ["red", "big", "tasty"]
fruits = ["apple", "banana", "cherry"]

for x in adj:
  for y in fruits:
    print(x, y)
-------------------------------------------------------------------------------
The pass Statement
for loops cannot be empty, but if you for some reason have a for loop with no content, put in the pass statement to avoid getting an error.   

for x in [0, 1, 2]:
  pass
-------------------------------------------------------------------------------
PYTHON FUNCTIONS

Creating a Function
In Python a function is defined using the def keyword:

def my_function():
  print("Hello from a function")
-------------------------------------------------------------------------------
Calling a Function
To call a function, use the function name followed by parenthesis:

def my_function():
  print("Hello from a function")

my_function()
-------------------------------------------------------------------------------
Arguments
The following example has a function with one argument (fname). When the function is called, we pass along a first name, which is used inside the function to print the full name:

def my_function(fname):
  print(fname + " Refsnes")

my_function("Emil")
my_function("Tobias")
my_function("Linus")
-------------------------------------------------------------------------------
Number of Arguments
By default, a function must be called with the correct number of arguments. Meaning that if your function expects 2 arguments, you have to call the function with 2 arguments, not more, and not less.

def my_function(fname, lname):
  print(fname + " " + lname)

my_function("Emil", "Refsnes")
-------------------------------------------------------------------------------
Arbitrary Arguments, *args
If you do not know how many arguments that will be passed into your function, add a * before the parameter name in the function definition.
This way the function will receive a tuple of arguments, and can access the items accordingly:
If the number of arguments is unknown, add a * before the parameter name:

def my_function(*kids):
  print("The youngest child is " + kids[2])

my_function("Emil", "Tobias", "Linus")
-------------------------------------------------------------------------------
Keyword Arguments
You can also send arguments with the key = value syntax.
This way the order of the arguments does not matter.

def my_function(child3, child2, child1):
  print("The youngest child is " + child3)

my_function(child1 = "Emil", child2 = "Tobias", child3 = "Linus")
-------------------------------------------------------------------------------
Arbitrary Keyword Arguments, **kwargs
If you do not know how many keyword arguments that will be passed into your function, add two asterisk: ** before the parameter name in the function definition.
This way the function will receive a dictionary of arguments, and can access the items accordingly:
If the number of keyword arguments is unknown, add a double ** before the parameter name:

def my_function(**kid):
  print("His last name is " + kid["lname"])

my_function(fname = "Tobias", lname = "Refsnes")
-------------------------------------------------------------------------------
Default Parameter Value
The following example shows how to use a default parameter value.
If we call the function without argument, it uses the default value:

def my_function(country = "Norway"):
  print("I am from " + country)

my_function("Sweden")
my_function("India")
my_function()
my_function("Brazil")
-------------------------------------------------------------------------------
Passing a List as an Argument
You can send any data types of argument to a function (string, number, list, dictionary etc.), and it will be treated as the same data type inside the function.
E.g. if you send a List as an argument, it will still be a List when it reaches the function:

def my_function(food):
  for x in food:
    print(x)

fruits = ["apple", "banana", "cherry"]

my_function(fruits)
-------------------------------------------------------------------------------
Return Values
To let a function return a value, use the return statement:

def my_function(x):
  return 5 * x

print(my_function(3))
print(my_function(5))
print(my_function(9))
-------------------------------------------------------------------------------
The pass Statement
function definitions cannot be empty, but if you for some reason have a function definition with no content, put in the pass statement to avoid getting an error.

def myfunction():
  pass
-------------------------------------------------------------------------------
PYTHON LAMBDA

Add 10 to argument a, and return the result:

typical function,
def addTen (n):
    num = (n+10)
    return  num
print(addTen(5))

lambda function,
x = lambda a : a + 10
print(x(5))
-------------------------------------------------------------------------------
Multiply argument a with argument b and return the result:
-------------------------------------------------------------------------------
x = lambda a, b : a * b
print(x(5, 6))
-------------------------------------------------------------------------------
Summarize argument a, b, and c and return the result:
x = lambda a, b, c : a + b + c
print(x(5, 6, 2))

Why Use Lambda Functions?
The power of lambda is better shown when you use them as an anonymous function inside another function.
Say you have a function definition that takes one argument, and that argument will be multiplied with an unknown number:
Use that function definition to make a function that always doubles the number you send in:

def myfunc(n):
  return lambda a : a * n

mydoubler = myfunc(2)

print(mydoubler(11))
-------------------------------------------------------------------------------
for tripler,

def myfunc(n):
  return lambda a : a * n

mytripler = myfunc(3)

print(mytripler(11))
-------------------------------------------------------------------------------
function with both,

def myfunc(n):
  return lambda a : a * n

mydoubler = myfunc(3)
mytripler = myfunc(3)

print(mydoubler(11))
print(mytripler(11))
-------------------------------------------------------------------------------
PYTHON SCOPE

Local Scope
A variable created inside a function is available inside that function:

def myfunc():
  x = 300
  print(x)

myfunc()
-------------------------------------------------------------------------------
The local variable can be accessed from a function within the function:

def myfunc():
  x = 300
  def myinnerfunc():
    print(x)
  myinnerfunc()

myfunc()
-------------------------------------------------------------------------------
A variable created outside of a function is global and can be used by anyone:

x = 300

def myfunc():
  print(x)

myfunc()

print(x)
-------------------------------------------------------------------------------
The function will print the local x, and then the code will print the global x:

x = 300

def myfunc():
  x = 200
  print(x)

myfunc()

print(x)
-------------------------------------------------------------------------------
If you use the global keyword, the variable belongs to the global scope:

def myfunc():
  global x
  x = 300

myfunc()

print(x)
-------------------------------------------------------------------------------
To change the value of a global variable inside a function, refer to the variable by using the global keyword:

x = 300

def myfunc():
  global x
  x = 200

myfunc()

print(x)
-------------------------------------------------------------------------------
Use end keyword in print function.
Usage of end, by default python’s print() function ends with a newline. Python’s print() function comes with a parameter called 'end'. By default, the value of this parameter is '\n', i.e. the new line character. You can modify a print statement with any character/string using this parameter.

print("Welcome to" , end = ' ') 
print("BtreeSystems", end = ' ')

above prints,

Welcome to BtreeSystems

instead of,

Welcome to
BtreeSystems

-------------------------------------------------------------------------------
PYTHON MODULES

To create a module just save the code you want in a file with the file extension .py
Save this code in a file named mymodule.py

def greeting(name):
  print("Hello, " + name)
-------------------------------------------------------------------------------
Now we can use the module we just created, by using the import statement:

import mymodule
mymodule.greeting("Jonathan")
-------------------------------------------------------------------------------
The module can contain functions, as already described, but also variables of all types (arrays, dictionaries, objects etc):
Save this code in the file mymodule.py

person1 = {
  "name": "John",
  "age": 36,
  "country": "Norway"
}
-------------------------------------------------------------------------------
Import the module named mymodule, and access the person1 dictionary:

import mymodule
a = mymodule.person1["age"]
print(a)
-------------------------------------------------------------------------------
You can create an alias when you import a module, by using the as keyword:
Create an alias for mymodule called mx:

import mymodule as mx
a = mx.person1["age"]
print(a)
-------------------------------------------------------------------------------
Built-in Modules
There are several built-in modules in Python, which you can import whenever you like.
Import and use the platform module:

import platform
x = platform.system()
print(x)
-------------------------------------------------------------------------------
Import From Module
You can choose to import only parts from a module, by using the from keyword.
The module named mymodule has one function and one dictionary:

def greeting(name):
  print("Hello, " + name)

person1 = {
  "name": "John",
  "age": 36,
  "country": "Norway"
}
-------------------------------------------------------------------------------
Import only the person1 dictionary from the module:

from mymodule import person1
print (person1["age"])
-------------------------------------------------------------------------------
PYTHON DATETIME
Import the datetime module and display the current date:

import datetime
x = datetime.datetime.now()
print(x)
2021-04-03 10:04:08.445075
-------------------------------------------------------------------------------
Return the year and name of weekday:
The datetime object has a method for formatting date objects into readable strings.
The method is called strftime(), and takes one parameter, format, to specify the format of the returned string:

import datetime
x = datetime.datetime.now()
print(x.year)
print(x.strftime("%A"))
print(x.strftime("%B"))
-------------------------------------------------------------------------------
Create a date object:

import datetime
x = datetime.datetime(2020, 5, 17)
print(x)
-------------------------------------------------------------------------------
A reference of all the legal format codes:
+-----------+-------------------------------------------------------------+--------------------------+
| Directive |                         Description                         |         Example          |
+-----------+-------------------------------------------------------------+--------------------------+
| %a        | Weekday, short version                                      | Wed                      |
| %A        | Weekday, full version                                       | Wednesday                |
| %w        | Weekday as a number 0-6, 0 is Sunday                        | 3                        |
| %d        | Day of month 01-31                                          | 31                       |
| %b        | Month name, short version                                   | Dec                      |
| %B        | Month name, full version                                    | December                 |
| %m        | Month as a number 01-12                                     | 12                       |
| %y        | Year, short version, without century                        | 18                       |
| %Y        | Year, full version                                          | 2018                     |
| %H        | Hour 00-23                                                  | 17                       |
| %I        | Hour 00-12                                                  | 5                        |
| %p        | AM/PM                                                       | PM                       |
| %M        | Minute 00-59                                                | 41                       |
| %S        | Second 00-59                                                | 8                        |
| %f        | Microsecond 000000-999999                                   | 548513                   |
| %z        | UTC offset                                                  | 100                      |
| %Z        | Timezone                                                    | CST                      |
| %j        | Day number of year 001-366                                  | 365                      |
| %U        | Week number of year, Sunday as the first day of week, 00-53 | 52                       |
| %W        | Week number of year, Monday as the first day of week, 00-53 | 52                       |
| %c        | Local version of date and time                              | Mon Dec 31 17:41:00 2018 |
| %x        | Local version of date                                       | 12/31/18                 |
| %X        | Local version of time                                       | 17:41:00                 |
| %%        | A % character                                               | %                        |
| %G        | ISO 8601 year                                               | 2018                     |
| %u        | ISO 8601 weekday (1-7)                                      | 1                        |
| %V        | ISO 8601 weeknumber (01-53)                                 | 1                        |
+-----------+-------------------------------------------------------------+--------------------------+
-------------------------------------------------------------------------------
PYTHON MATH
To use it, you must import the math module:

import math

The min() and max() functions can be used to find the lowest or highest value in an iterable:

x = min(5, 10, 25)
y = max(5, 10, 25)
print(x)
print(y)
-------------------------------------------------------------------------------
The abs() function returns the absolute (positive) value of the specified number:
x = abs(-7.25)

print(x)
-------------------------------------------------------------------------------
Return the value of 4 to the power of 3 (same as 4 * 4 * 4):

x = pow(4, 3)

print(x)
-------------------------------------------------------------------------------
The math.sqrt() method for example, returns the square root of a number:

import math

x = math.sqrt(64)

print(x)
-------------------------------------------------------------------------------
The math.ceil() method rounds a number upwards to its nearest integer, and the math.floor() method rounds a number downwards to its nearest integer, and returns the result:

import math
x = math.ceil(1.4)
y = math.floor(1.4)
print(x) # returns 2
print(y) # returns 1
-------------------------------------------------------------------------------
The math.pi constant, returns the value of PI (3.14...)

import math

x = math.pi

print(x)
-------------------------------------------------------------------------------
Math Methods:
+------------------+--------------------------------------------------------------------------------------------------------------+
|      Method      |                                                 Description                                                  |
+------------------+--------------------------------------------------------------------------------------------------------------+
| math.acos()      | Returns the arc cosine of a number                                                                           |
| math.acosh()     | Returns the inverse hyperbolic cosine of a number                                                            |
| math.asin()      | Returns the arc sine of a number                                                                             |
| math.asinh()     | Returns the inverse hyperbolic sine of a number                                                              |
| math.atan()      | Returns the arc tangent of a number in radians                                                               |
| math.atan2()     | Returns the arc tangent of y/x in radians                                                                    |
| math.atanh()     | Returns the inverse hyperbolic tangent of a number                                                           |
| math.ceil()      | Rounds a number up to the nearest integer                                                                    |
| math.comb()      | Returns the number of ways to choose k items from n items without repetition and order                       |
| math.copysign()  | Returns a float consisting of the value of the first parameter and the sign of the second parameter          |
| math.cos()       | Returns the cosine of a number                                                                               |
| math.cosh()      | Returns the hyperbolic cosine of a number                                                                    |
| math.degrees()   | Converts an angle from radians to degrees                                                                    |
| math.dist()      | Returns the Euclidean distance between two points (p and q), where p and q are the coordinates of that point |
| math.erf()       | Returns the error function of a number                                                                       |
| math.erfc()      | Returns the complementary error function of a number                                                         |
| math.exp()       | Returns E raised to the power of x                                                                           |
| math.expm1()     | Returns Ex - 1                                                                                               |
| math.fabs()      | Returns the absolute value of a number                                                                       |
| math.factorial() | Returns the factorial of a number                                                                            |
| math.floor()     | Rounds a number down to the nearest integer                                                                  |
| math.fmod()      | Returns the remainder of x/y                                                                                 |
| math.frexp()     | Returns the mantissa and the exponent, of a specified number                                                 |
| math.fsum()      | Returns the sum of all items in any iterable (tuples, arrays, lists, etc.)                                   |
| math.gamma()     | Returns the gamma function at x                                                                              |
| math.gcd()       | Returns the greatest common divisor of two integers                                                          |
| math.hypot()     | Returns the Euclidean norm                                                                                   |
| math.isclose()   | Checks whether two values are close to each other, or not                                                    |
| math.isfinite()  | Checks whether a number is finite or not                                                                     |
| math.isinf()     | Checks whether a number is infinite or not                                                                   |
| math.isnan()     | Checks whether a value is NaN (not a number) or not                                                          |
| math.isqrt()     | Rounds a square root number downwards to the nearest integer                                                 |
| math.ldexp()     | Returns the inverse of math.frexp() which is x * (2**i) of the given numbers x and i                         |
| math.lgamma()    | Returns the log gamma value of x                                                                             |
| math.log()       | Returns the natural logarithm of a number, or the logarithm of number to base                                |
| math.log10()     | Returns the base-10 logarithm of x                                                                           |
| math.log1p()     | Returns the natural logarithm of 1+x                                                                         |
| math.log2()      | Returns the base-2 logarithm of x                                                                            |
| math.perm()      | Returns the number of ways to choose k items from n items with order and without repetition                  |
| math.pow()       | Returns the value of x to the power of y                                                                     |
| math.prod()      | Returns the product of all the elements in an iterable                                                       |
| math.radians()   | Converts a degree value into radians                                                                         |
| math.remainder() | Returns the closest value that can make numerator completely divisible by the denominator                    |
| math.sin()       | Returns the sine of a number                                                                                 |
| math.sinh()      | Returns the hyperbolic sine of a number                                                                      |
| math.sqrt()      | Returns the square root of a number                                                                          |
| math.tan()       | Returns the tangent of a number                                                                              |
| math.tanh()      | Returns the hyperbolic tangent of a number                                                                   |
| math.trunc()     | Returns the truncated integer parts of a number                                                              |
+------------------+--------------------------------------------------------------------------------------------------------------+

Math Constants:
+----------+---------------------------------------------------+
| Constant |                    Description                    |
+----------+---------------------------------------------------+
| math.e   | Returns Euler's number (2.7182...)                |
| math.inf | Returns a floating-point positive infinity        |
| math.nan | Returns a floating-point NaN (Not a Number) value |
| math.pi  | Returns PI (3.1415...)                            |
| math.tau | Returns tau (6.2831...)                           |
+----------+---------------------------------------------------+

PYTHON FILE HANDLING

The key function for working with files in Python is the open() function.
The open() function takes two parameters; filename, and mode.
There are four different methods (modes) for opening a file:

"r" - Read - Default value. Opens a file for reading, error if the file does not exist
"a" - Append - Opens a file for appending, creates the file if it does not exist
"w" - Write - Opens a file for writing, creates the file if it does not exist
"x" - Create - Creates the specified file, returns an error if the file exists

In addition you can specify if the file should be handled as binary or text mode

"t" - Text - Default value. Text mode
"b" - Binary - Binary mode (e.g. images)
-------------------------------------------------------------------------------
To open a file for reading it is enough to specify the name of the file:

f = open("demofile.txt")
The code above is the same as:

f = open("demofile.txt", "rt")
Because "r" for read, and "t" for text are the default values, you do not need to specify them.
-------------------------------------------------------------------------------
demofile.txt
Hello! Welcome to demofile.txt
This file is for testing purposes.
Good Luck!

To open the file, use the built-in open() function.

The open() function returns a file object, which has a read() method for reading the content of the file:

f = open("C:\\Users\\bbhagy905\\Desktop\\BBC\\Python_BTree\\btreePython\\README.md", "r")
print(f.read())
-------------------------------------------------------------------------------
Read Only Parts of the File
By default the read() method returns the whole text, but you can also specify how many characters you want to return:

Return the 5 first characters of the file:

f = open("demofile.txt", "r")
print(f.read(5))
-------------------------------------------------------------------------------
Read Lines
You can return one line by using the readline() method:

Read one line of the file:

f = open("demofile.txt", "r")
print(f.readline())

By calling readline() two times, you can read the two first lines:

Read two lines of the file:

f = open("demofile.txt", "r")
print(f.readline())
print(f.readline())
-------------------------------------------------------------------------------
By looping through the lines of the file, you can read the whole file, line by line:

Loop through the file line by line:

f = open("C:\\Users\\bbhagy905\\Desktop\\BBC\\Python_BTree\\btreePython\\README.md", "r")
for x in f:
  print(x)
-------------------------------------------------------------------------------
Close Files
It is a good practice to always close the file when you are done with it.

Close the file when you are finish with it:

f = open("demofile.txt", "r")
print(f.readline())
f.close()  
-------------------------------------------------------------------------------
Write to an Existing File
To write to an existing file, you must add a parameter to the open() function:

"a" - Append - will append to the end of the file
"w" - Write - will overwrite any existing content

Open the file "demofile2.txt" and append content to the file:

f = open("demofile2.txt", "a")
f.write("Now the file has more content!")
f.close()

#open and read the file after the appending:
f = open("demofile2.txt", "r")
print(f.read())
-------------------------------------------------------------------------------
Open the file "demofile3.txt" and overwrite the content:

f = open("demofile3.txt", "w")
f.write("Woops! I have deleted the content!")
f.close()

#open and read the file after the appending:
f = open("demofile3.txt", "r")
print(f.read())
-------------------------------------------------------------------------------
Using write along with with() function

We can also use write function along with with() function:

# Python code to illustrate with() alongwith write()
with open("file.txt", "w") as f: 
    f.write("Hello World!!!") 
-------------------------------------------------------------------------------
split() using file handling

We can also split lines using file handling in Python. This splits the variable when space is encountered. You can also split using any characters as we wish. Here is the code:

# Python code to illustrate split() function
with open("file.text", "r") as file:
    data = file.readlines()
    for line in data:
        word = line.split()
        print (word)    
-------------------------------------------------------------------------------
#to read n no. of lines
with open("C:\\Users\\bbhagy905\\Desktop\\BBC\\Python_BTree\\btreePython\\README.md") as myfile:
    firstNlines=myfile.readlines()[0:1]
    print(firstNlines)       
-------------------------------------------------------------------------------
Create a New File
To create a new file in Python, use the open() method, with one of the following parameters:

"x" - Create - will create a file, returns an error if the file exist
"a" - Append - will create a file if the specified file does not exist
"w" - Write - will create a file if the specified file does not exist

Create a file called "myfile.txt":

f = open("myfile.txt", "x")
-------------------------------------------------------------------------------
Delete a File
To delete a file, you must import the OS module, and run its os.remove() function:

Remove the file "demofile.txt":

import os
os.remove("demofile.txt")
-------------------------------------------------------------------------------
Check if File exist:
To avoid getting an error, you might want to check if the file exists before you try to delete it:

Check if file exists, then delete it:

import os
if os.path.exists("demofile.txt"):
  os.remove("demofile.txt")
else:
  print("The file does not exist")
-------------------------------------------------------------------------------
Delete Folder
To delete an entire folder, use the os.rmdir() method:

Remove the folder "myfolder":

import os
os.rmdir("myfolder")  

-------------------------------------------------------------------------------

PYTHON REGEX

Import the re module:

import re

When you have imported the re module, you can start using regular expressions:
-------------------------------------------------------------------------------
Search the string to see if it starts with "The" and ends with "Spain":

import re

txt = "The rain in Spain"
x = re.search("^The.*Spain$", txt)

RegEx Functions
The re module offers a set of functions that allows us to search a string for a match:
+----------+-------------------------------------------------------------------+
| Function |                            Description                            |
+----------+-------------------------------------------------------------------+
| findall  | Returns a list containing all matches                             |
| search   | Returns a Match object if there is a match anywhere in the string |
| split    | Returns a list where the string has been split at each match      |
| sub      | Replaces one or many matches with a string                        |
+----------+-------------------------------------------------------------------+

Metacharacters
Metacharacters are characters with a special meaning:

+-----------+----------------------------------------------------------------------------+---------------+
| Character |                                Description                                 |    Example    |
+-----------+----------------------------------------------------------------------------+---------------+
| []        | A set of characters                                                        | "[a-m]"       |
| \         | Signals a special sequence (can also be used to escape special characters) | "\d"          |
| .         | Any character (except newline character)                                   | "he..o"       |
| ^         | Starts with                                                                | "^hello"      |
| $         | Ends with                                                                  | "world$"      |
| *         | Zero or more occurrences                                                   | "aix*"        |
| +         | One or more occurrences                                                    | "aix+"        |
| {}        | Exactly the specified number of occurrences                                | "al{2}"       |
| |         | Either or                                                                  | "falls|stays" |
| ()        | Capture and group                                                          |               |
+-----------+----------------------------------------------------------------------------+---------------+

Special Sequences
A special sequence is a \ followed by one of the characters in the list below, and has a special meaning:
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------+---------------+--+--+
| Character | Description                                                                                                                                 | Example       |  |  |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------+---------------+--+--+
| \A        | Returns   a match if the specified characters are at the beginning of the string                                                            | "\AThe"       |  |  |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------+---------------+--+--+
|           | 	Returns a match where the   specified characters are at the beginning or at the end of a word                                             | r"\bain"      |  |  |
| \b        |      (the "r" in the beginning is making sure that the string is being   treated as a "raw string")                                         | r"ain\b"      |  |  |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------+---------------+--+--+
|           | Returns a match where the   specified characters are present, but NOT at the beginning (or at the end) of   a word                          | r"\Bain"      |  |  |
| \B        |      (the "r" in the beginning is making sure that the string is being   treated as a "raw string")                                         | r"ain\B"      |  |  |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------+---------------+--+--+
| \d        | 	Returns a match where the   string contains digits (numbers from 0-9)                                                                     | "\d"          |  |  |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------+---------------+--+--+
| \D        | Returns   a match where the string DOES NOT contain digits                                                                                  | "\D"          |  |  |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------+---------------+--+--+
| \s        | Returns   a match where the string contains a white space character                                                                         | "\s"          |  |  |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------+---------------+--+--+
| \S        | Returns a   match where the string DOES NOT contain a white space character                                                                 | "\S"          |  |  |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------+---------------+--+--+
| \w        | Returns a   match where the string contains any word characters (characters from a to Z,   digits from 0-9, and the underscore _ character) | "\w"          |  |  |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------+---------------+--+--+
| \W        | Returns a   match where the string DOES NOT contain any word characters                                                                     | "\W"          |  |  |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------+---------------+--+--+
| \z        | Returns a   match if the specified characters are at the end of the string                                                                  | "Spain\Z"     |  |  |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------+---------------+--+--+


Sets
A set is a set of characters inside a pair of square brackets [] with a special meaning:
+------------+----------------------------------------------------------------------------------------------------------------------+
|    Set     |                                                     Description                                                      |
+------------+----------------------------------------------------------------------------------------------------------------------+
| [arn]      | Returns a match where one of the specified characters (a, r, or n) are present                                       |
| [a-n]      | Returns a match for any lower case character, alphabetically between a and n                                         |
| [^arn]     | Returns a match for any character EXCEPT a, r, and n                                                                 |
| [0123]     | Returns a match where any of the specified digits (0, 1, 2, or 3) are present                                        |
| [0-9]      | Returns a match for any digit between 0 and 9                                                                        |
| [0-5][0-9] | Returns a match for any two-digit numbers from 00 and 59                                                             |
| [a-zA-Z]   | Returns a match for any character alphabetically between a and z, lower case OR upper case                           |
| [+]        | In sets, +, *, ., |, (), $,{} has no special meaning, so [+] means: return a match for any + character in the string |
+------------+----------------------------------------------------------------------------------------------------------------------+

The findall() Function
The findall() function returns a list containing all matches.
Print a list of all matches:

import re

txt = "The rain in Spain"
x = re.findall("ai", txt)
print(x)
-------------------------------------------------------------------------------
The list contains the matches in the order they are found.
If no matches are found, an empty list is returned:

Return an empty list if no match was found:

import re

txt = "The rain in Spain"
x = re.findall("Portugal", txt)
print(x)
-------------------------------------------------------------------------------
The search() Function
The search() function searches the string for a match, and returns a Match object if there is a match.

If there is more than one match, only the first occurrence of the match will be returned:

Search for the first white-space character in the string:

import re

txt = "The rain in Spain"
x = re.search("\s", txt)

print("The first white-space character is located in position:", x.start())
-------------------------------------------------------------------------------
If no matches are found, the value None is returned:

Make a search that returns no match:

import re

txt = "The rain in Spain"
x = re.search("Portugal", txt)
print(x)
-------------------------------------------------------------------------------
The split() Function
The split() function returns a list where the string has been split at each match:

Split at each white-space character:

import re

txt = "The rain in Spain"
x = re.split("\s", txt)
print(x)
-------------------------------------------------------------------------------
You can control the number of occurrences by specifying the maxsplit parameter:

Split the string only at the first occurrence:

import re

txt = "The rain in Spain"
x = re.split("\s", txt, 1)
print(x)
-------------------------------------------------------------------------------
The sub() Function
The sub() function replaces the matches with the text of your choice:

Replace every white-space character with the number 9:

import re

txt = "The rain in Spain"
x = re.sub("\s", "9", txt)
print(x)
-------------------------------------------------------------------------------
You can control the number of replacements by specifying the count parameter:

Replace the first 2 occurrences:

import re

txt = "The rain in Spain"
x = re.sub("\s", "9", txt, 2)
print(x)
-------------------------------------------------------------------------------
Match Object
A Match Object is an object containing information about the search and the result.

Note: If there is no match, the value None will be returned, instead of the Match Object.

Do a search that will return a Match Object:

import re

txt = "The rain in Spain"
x = re.search("ai", txt)
print(x) #this will print an object
-------------------------------------------------------------------------------
The Match object has properties and methods used to retrieve information about the search, and the result:

.span() returns a tuple containing the start-, and end positions of the match.
.string returns the string passed into the function
.group() returns the part of the string where there was a match

Print the position (start- and end-position) of the first match occurrence.

The regular expression looks for any words that starts with an upper case "S":

import re

txt = "The rain in Spain"
x = re.search(r"\bS\w+", txt)
print(x.span())
-------------------------------------------------------------------------------
Print the string passed into the function:

import re

txt = "The rain in Spain"
x = re.search(r"\bS\w+", txt)
print(x.string)
-------------------------------------------------------------------------------
Print the part of the string where there was a match.

The regular expression looks for first occurence words that starts with an upper case "S":

import re

txt = "The rain in Spain"
x = re.search(r"\bS\w+", txt)
print(x.group())
-------------------------------------------------------------------------------